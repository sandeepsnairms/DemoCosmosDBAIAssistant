@using Search.Constants
@using VectorSearchAiAssistant.Service.Interfaces
@using VectorSearchAiAssistant.Service.Utils

@inject IChatManager chatManager


<div class="h-100 d-flex flex-column" style="min-width: 275px;">

    <div class="flex-column navbar navbar-dark bg-primary">
        <div class="container-fluid justify-content-between">
            <div class="flex-fill">
                <h4 class="text-white mt-2">Contoso AI Chat</h4>
            </div>
            <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                <i class="bi bi-arrow-right-square-fill"></i>
            </button>
        </div>
    </div>

    <div class="flex-grow-1 flex-column justify-content-center overflow-y-auto overflow-x-hidden">
        @if (_loadingComplete == true)
        {
            <div>
                <nav class="flex-column">
                    <div class="nav-item py-2 d-grid">
                        <NavLink style="cursor:pointer"  @ref="navLinkNewChat" class="btn btn-sm mx-1 btn-secondary d-flex flex-row align-items start" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                            <i class="bi bi-plus"></i>
                            <span class="flex-fill">
                                Create New Chat
                            </span>
                        </NavLink>
                    </div>

                    

                    <div class="row row-cols-1 g-2 px-2 d-flex flex-column align-items-start">
                        <div class="input-group">
                            <input class="form-control p-2" type="text" rows="1" style="box-shadow: none" placeholder="Search last 30 days..." @bind="@SearchTextSet" @oninput="@((e) => { SearchText=e.Value?.ToString();})" aria-label="Search" aria-describedby="search-addon">

                            <button type="button" class="btn btn-outline-secondary" @onclick="SearchAsync">
                                <i class="bi bi-search" aria-hidden="true"></i>
                            </button>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-link btn-sm" @onclick="SearchAsync">
                                refresh
                            </button>
                        </div>
                        @foreach (var session in ChatSessions)
                        {
                            <div class="col">
                                <div class="card @(IsActiveSession(session.SessionId) ? "bg-primary text-light" : "bg-primary opacity-50 text-light")" @onclick="@(e => LoadChat(session.SessionId,session.Name, session.TokensUsed))">
                                    <div class="card-body">
                                        <a class="card-title text-decoration-none h6" @onclick="@(e => LoadChat(session.SessionId,session.Name, session.TokensUsed))">
                                            @if (IsActiveSession(session.SessionId))
                                            {
                                                <i class="bi bi-chat-right-dots-fill me-2"></i>
                                            }
                                            <span title="@session.Name" class="ms-1">
                                                @SafeSubstring(session.Name,20)
                                            </span>
                                        </a>
                                    </div>
                                    <div class="card-footer d-flex align-items-between">
                                        <span class="flex-grow-1"></span>
                                        <div class="align-items-between">
                                            <span class="me-2 badge rounded-pill bg-light">
                                                Tokens Used: @session.TokensUsed
                                            </span>
                                        </div>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenInput(session.SessionId,session.Name))">
                                                <i class="bi bi-pencil-fill me-1"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenConfirmation(session.SessionId,session.Name))">
                                                <i class="bi bi-trash-fill ms-1"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </nav>
            </div>
        }
    </div>
</div>



@if (_deletePopUpOpen)
{
    <Confirmation Caption="Delete a Chat"
              Message="@_popUpText"
              OnClose="@OnConfirmationClose"
              Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}


@if (_renamePopUpOpen)
{
    <Input Caption="Rename a Chat"
       Value="@_popUpText"
       OnClose="@OnInputClose">
        </Input>
}


@code {

    [Parameter]
    public EventCallback<Session> OnChatClicked { get; set; } = default!;

    [Parameter]
    public static List<Session> ChatSessions { get; set; } = new();

    [Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    [Parameter]
    public EventCallback OnThemeUpdated { get; set; }

    NavLink navLinkNewChat;

    private string? SearchText { get; set; }
    private string? SearchTextSet { get; set; }

    private string? _sessionId;
    private string? _popUpText;
    private bool _deletePopUpOpen = false;
    private bool _loadingComplete;
    private bool _renamePopUpOpen = false;

    private string? Tenant;
    private string? User;
    private bool EnablePaging;

    public Session? CurrentSession;


    // Inject NavigationManager
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private static event EventHandler<string>? OnNavMenuChanged;

    async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    async private Task ChangeTheme()
    {
        await OnThemeUpdated.InvokeAsync();
    }

    protected override void OnInitialized()
    {


        // Read query string parameters using NavigationManager
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Get the value of the "myParameter" query string parameter
        Tenant = queryString["Tenant"];
        User = queryString["User"];
        bool.TryParse(queryString["Paging"], out EnablePaging);

        if (Tenant == null || User == null)
        {
            Tenant = "t1";
            User = "u1";
            NavigationManager.NavigateTo($"?Tenant={Tenant}&User={User}&Paging={EnablePaging}");
           
        }

        OnNavMenuChanged += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                this.StateHasChanged();
                await LoadCurrentChatAsync();
            });
        };
    }

    private void OpenConfirmation(string id, string title)
    {
        _deletePopUpOpen = true;
        _sessionId = id;
        _popUpText = $"Do you want to delete the chat \"{title}\"?";
    }

    public void UpdateNavMenuDisplay(string reason = "")
    {
        if (OnNavMenuChanged is not null)
        {
            OnNavMenuChanged.Invoke(null, reason);
        }
    }

    private async Task SearchAsync()
    {   
        PartitionManager.RecordQueryParams rParams = new(EnablePaging, Tenant, User, string.Empty, string.Empty);

        if (SearchText=="" || SearchText==null)
            ChatSessions = await chatManager.GetAllChatSessionsAsync(rParams);
        else
            ChatSessions = await chatManager.GetSessionsBySearchAsync(rParams,SearchText);


        if (ChatSessions is not null & ChatSessions?.Count ==0)
        {
            UpdateNavMenuDisplay("Search");

            CurrentSession = new Session(Tenant, User);

            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }

        }

        await LoadCurrentChatAsync();
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        bool updateCurrentChat = false;

        if (CurrentSession is not null & _sessionId == CurrentSession?.SessionId)
            updateCurrentChat = true;

        if (isOk)
        {
            _deletePopUpOpen = false;
            PartitionManager.RecordQueryParams rParams = new(EnablePaging, Tenant, User, CurrentSession?.SessionId, _sessionId);
            await chatManager.DeleteChatSessionAsync(rParams);

            _deletePopUpOpen = false;

            UpdateNavMenuDisplay("Delete");

            if (!updateCurrentChat)
                return;


            CurrentSession = new Session(Tenant,User);

            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }

            await LoadCurrentChatAsync();
        }

        _deletePopUpOpen = false;
    }

    private void OpenInput(string id, string title)
    {
        _renamePopUpOpen = true;
        _sessionId = id;
        _popUpText = title;
    }

    private async Task OnInputClose(string newName)
    {
        if (newName != "")
        {
            bool updateCurrentChat = false;

            if (_sessionId == CurrentSession?.SessionId)
            {
                updateCurrentChat = true;
            }

            PartitionManager.RecordQueryParams rParams = new(EnablePaging, Tenant, User, CurrentSession?.SessionId, _sessionId);
            await chatManager.RenameChatSessionAsync(rParams, newName);

            _renamePopUpOpen = false;

            UpdateNavMenuDisplay("Rename");

            if (!updateCurrentChat)
            {
                return;
            }

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newName;
            }
            await LoadCurrentChatAsync();
        }

        _renamePopUpOpen = false;
    }

    private async Task NewChat()
    {

        PartitionManager.RecordQueryParams rParams = new(EnablePaging, Tenant, User, CurrentSession?.SessionId, string.Empty);
        await chatManager.CreateNewChatSessionAsync(rParams);

        if (ChatSessions.Count == 1)
        {
            CurrentSession = ChatSessions[0] with { };
            await LoadCurrentChatAsync();
        }


        UpdateNavMenuDisplay("Add");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_loadingComplete == true)
            return;

        _loadingComplete = false;

        PartitionManager.RecordQueryParams rParams = new(EnablePaging, Tenant, User, CurrentSession?.SessionId, string.Empty);

        ChatSessions = await chatManager.GetAllChatSessionsAsync(rParams);
        if (CurrentSession is not null && ChatSessions is not null & ChatSessions?.Count > 0)
        {
            var match = ChatSessions?.FirstOrDefault();
            if (match is not null)
            {
                CurrentSession.SessionId = match.SessionId;
                CurrentSession.Name = match.Name;
                CurrentSession.TokensUsed = match.TokensUsed;
            }
        }

        _loadingComplete = true;
        await LoadCurrentChatAsync();

    }

    private async Task<int> LoadCurrentChatAsync()
    {
        int index = 0;
        if (CurrentSession is not null & ChatSessions is not null & ChatSessions?.Count > 0)
        {
            index = ChatSessions?.FindIndex(s => s.SessionId == CurrentSession?.SessionId) ?? 0;
        }
        if (CurrentSession is null || index < 0)
        {
            CurrentSession = new Session(Tenant,User);
            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }
        }

        await OnChatClicked.InvokeAsync(CurrentSession);

        return 0;
    }


    async private Task<int> LoadChat(string _sessionId, string sessionName, int? tokensUsed)
    {
        if (ChatSessions is null) return 0;

        if (CurrentSession is null)
            CurrentSession = new Session(Tenant,User);

        CurrentSession.SessionId = _sessionId;
        CurrentSession.Name = sessionName;
        CurrentSession.TokensUsed = tokensUsed;

        await LoadCurrentChatAsync();

        return 0;
    }

    private bool IsActiveSession(string _sessionId) => CurrentSession switch
    {
        null => true,
        (Session s) when s.SessionId == _sessionId => true,
        _ => false
    };

    public string SafeSubstring(string text, int maxLength) => text switch
    {
        null => string.Empty,
        _ => text.Length > maxLength ? text.Substring(0, maxLength) + "..." : text
    };
}